import os
from asyncio.exceptions import CancelledError
from time import sleep

from userbot import jmthon

from ..core.logger import logging
from ..core.managers import edit_or_reply
from ..sql_helper.global_collection import (
    add_to_collectionlist,
    del_keyword_collectionlist,
    get_collectionlist_items,
)
from ..sql_helper.globals import addgvar, delgvar, gvarstatus
from . import BOTLOG, BOTLOG_CHATID, HEROKU_APP

LOGS = logging.getLogger(__name__)
plugin_category = "tools"


@jmthon.ar_cmd(
    pattern="ุงุนุงุฏุฉ ุชุดุบูู$",
    command=("ุงุนุงุฏุฉ ุชุดุบูู", plugin_category),
    info={
        "header": "ุงุนุงุฏุฉ ุชุดุบูู ุงูุจูุช !!",
        "usage": "{tr}ุงุนุงุฏุฉ ุชุดุบูู",
    },
    disable_errors=True,
)
async def _(event):
    "ุงุนุงุฏุฉ ุชุดุบูู ุงูุจูุช !!"
    if BOTLOG:
        await event.client.send_message(BOTLOG_CHATID, "#ุงุนุงุฏุฉ_ุงูุชุดุบูู \n" "ุชู ุงุนุงุฏุฉ ุชุดุบูู ุงูุจูุช")
    sandy = await edit_or_reply(
        event,
        "ุชูุช ุงุนุงุฏุฉ ุงูุชุดุบูู ุจูุฌุงุญ โ\n**ุงุฑุณู** `.ูุญุต` ** ุงู ** `.ุงูุงูุงูุฑ` ** ููุชุญูู ููุง ุฅุฐ ูุงู ุงูุจูุช ุดุบุงู ุ ูุณุชุบุฑู ุงูุฃูุฑ ูู ุงููุงูุน 1-2 ุฏูููุฉ ูุฅุนุงุฏุฉ ุงูุชุดุบูู**",
    )
    try:
        ulist = get_collectionlist_items()
        for i in ulist:
            if i == "restart_update":
                del_keyword_collectionlist("restart_update")
    except Exception as e:
        LOGS.error(e)
    try:
        add_to_collectionlist("restart_update", [sandy.chat_id, sandy.id])
    except Exception as e:
        LOGS.error(e)
    try:
        await jmthon.disconnect()
    except CancelledError:
        pass
    except Exception as e:
        LOGS.error(e)


@jmthon.ar_cmd(
    pattern="ุงููุงู ุงูุณูุฑุณ$",
    command=("ุงููุงู ุงูุณูุฑุณ", plugin_category),
    info={
        "header": "ุงููุงู ุชุดุบูู ุงูุณูุฑุณ !!",
        "description": "ูุฅููุงู ุชุดุบูู ุงูุฏููู ูู ููุฑููู. ูุง ููููู ุชุดุบูู ุงูุจูุช ุ ุงุฐุง ุงุฑุฏุช ุชุดุบููู ุชุญุชุงุฌ ุงูู ุชุดุบููู ูุฏููุง ูู ููุฑููู",
        "usage": "{tr}ุงููุงู ุงูุณูุฑุณ",
    },
)
async def _(event):
    "ุงููุงู ุชุดุบูู ุงูุณูุฑุณ"
    if BOTLOG:
        await event.client.send_message(BOTLOG_CHATID, "#ุงููุงู_ุงูุชุดุบูู \n" "ุชู ุงููุงู ุชุดุบูู ุงูุณูุฑุณ")
    await edit_or_reply(event, "**ุฌุงุฑู ุฅููุงู ุชุดุบูู ุงูุณูุฑุณ ุงูุขู ... ุดุบููููู ูุฏูููุง ูุงุญููุง**")
    if HEROKU_APP is not None:
        HEROKU_APP.process_formation()["worker"].scale(0)
    else:
        os._exit(143)


@jmthon.ar_cmd(
    pattern="ุงููุงู ูุคูุช( [0-9]+)?$",
    command=("ุงููุงู ูุคูุช", plugin_category),
    info={
        "header": "ุณูู ูุชููู ุงูุณูุฑุณ ุนู ุงูุนูู ูู ุงูููุช ุงููุฐููุฑ.",
        "usage": "{tr}ุงููุงู ูุคูุช <ุนุฏุฏ ุงูุซูุงูู>",
        "examples": "{tr}ุงููุงู ูุคูุช 60",
    },
)
async def _(event):
    "ูุฅูุงู ุชุดุบูู ุงูุณูุฑุณ ูุคูุช"
    if " " not in event.pattern_match.group(1):
        return await edit_or_reply(event, "ุงูุงูุฑ : **. ููุช ุงูุงููุงู**")
    counter = int(event.pattern_match.group(1))
    if BOTLOG:
        await event.client.send_message(
            BOTLOG_CHATID,
            "ููุฏ ูุถุนุช ุงูุณูุฑุณ ูู ูุถุน ุงูุณููู ููุฏุฉ " + str(counter) + " ุซูุงูู",
        )
    event = await edit_or_reply(event, f"**ok, let me sleep for {counter} seconds**")
    sleep(counter)
    await event.edit("**OK, I'm awake now.**")


@jmthon.ar_cmd(
    pattern="ุงูุชุญุฏูุซุงุช (ุชุดุบูู|ุงููุงู)$",
    command=("ุงูุชุญุฏูุซุงุช", plugin_category),
    info={
        "header": "โฏ๏ธูุชุญุฏููุซ ุงูุฏุฑุฏุดูุฉ ุจุนูุฏ ุฅุนูุงุฏุฉ ุงูุชุดุบููู  ุฃู ุฅุนูุงุฏุฉ ุงูุชุญูููู  ",
        "description": "โ๏ธุณูุชูู ุฅุฑุณูุงู ุจููู cmds ฺชูุฑุฏ ุนูู ุงูุฑุณุงููุฉ ุงูุณุงุจููุฉ ุงูุฃุฎููุฑุฉ ูู (ุฅุนุงุฏุฉ ุชุดุบูู/ุฅุนุงุฏุฉ ุชุญููู/ุชุญุฏูุซ cmds) ๐ก.",
        "usage": [
            "{tr}ุงูุชุญุฏูุซุงุช <ุชุดุบูู/ุงููุงู",
        ],
    },
)
async def set_pmlog(event):
    "โฏ๏ธูุชุญุฏููุซ ุงูุฏุฑุฏุดูุฉ ุจุนูุฏ ุฅุนูุงุฏุฉ ุงูุชุดุบููู  ุฃู ุฅุนูุงุฏุฉ ุงูุชุญูููู"
    input_str = event.pattern_match.group(1)
    if input_str == "ุงููุงู":
        if gvarstatus("restartupdate") is None:
            return await edit_delete(event, "**โฏ๏ธุชูู ุชุนุทููู ุงูุชูุญุฏููุซุงุช ุจุงููุนูู โ๏ธ**")
        delgvar("restartupdate")
        return await edit_or_reply(event, "**โ๏ธุชูู ุชุนุทููู ุงูุชูุญุฏููุซุงุช ุจูุฌูุงุญ โ**")
    if gvarstatus("restartupdate") is None:
        addgvar("restartupdate", "turn-oned")
        return await edit_or_reply(event, "**โ๏ธุชูู ุชุดุบูู ุงูุชูุญุฏููุซุงุช ุจูุฌูุงุญ โ**")
    await edit_delete(event, "**โฏ๏ธุชูู ุชุดุบูู ุงูุชูุญุฏููุซุงุช ุจุงููุนูู โ๏ธ**")
